{"version":3,"sources":["Tracker.js","App.js","reportWebVitals.js","index.js"],"names":["Tracker","useState","ip","setIp","location","setLocation","timezone","setTimezone","isp","setIsp","lat","lng","center","setCenter","mapRef","useRef","isTracking","setIsTracking","data","setData","error","setError","tracker","apiKey","fetchAddress","fetch","this","then","res","ok","Error","json","country","latitude","longitude","catch","err","message","handleSearch","e","preventDefault","target","value","useEffect","className","onChange","onKeyUp","key","onClick","class","placeholder","MapContainer","zoom","ref","TileLayer","url","attribution","Marker","position","Popup","src","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79043be6.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, Icon } from \"react-leaflet\";\r\nimport { useRef } from 'react';\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\n\r\nconst Tracker = () => {\r\n    // IP address info states\r\n    const [ip, setIp] = useState('');\r\n    const [location, setLocation] = useState('');\r\n    const [timezone, setTimezone] = useState('');\r\n    const [isp, setIsp] = useState('');\r\n    const [center, setCenter] = useState({ lat: null, lng: null });\r\n    const ZOOM_LEVEL = 2;\r\n    const mapRef = useRef();\r\n    // fetch request states\r\n    const [isTracking, setIsTracking] = useState(true);\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const tracker = {\r\n        apiKey: 'at_QYweX3H4575qmegOapHTs3EQmcs4s',\r\n\r\n        fetchAddress: function (ip) {\r\n            fetch('https://geo.ipify.org/api/v1?apiKey=' + this.apiKey\r\n                + '&ipAddress='\r\n                + ip)\r\n                .then(res => {\r\n                    if (!res.ok) {\r\n                        throw Error('Could not track IP address')\r\n                    }\r\n                    return res.json()\r\n                })\r\n                .then((data) => {\r\n                    const { ip, isp, location: { country, timezone, lat: latitude, lng: longitude }, } = data;\r\n                    setIp(ip);\r\n                    setLocation(country);\r\n                    setTimezone(timezone);\r\n                    setIsp(isp);\r\n                    setCenter({ lat: latitude, lng: longitude });\r\n                    setIsTracking(null);\r\n                    setData(true);\r\n                    setError(null);\r\n                }).catch((err) => {\r\n                    setError(err.message);\r\n                    setIsTracking(false);\r\n                    setData(false);\r\n                })\r\n\r\n        }\r\n    }\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n        setIsTracking(true);\r\n        tracker.fetchAddress(e.target.value);\r\n    }\r\n    const handleEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            handleSearch(e)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        tracker.fetchAddress(ip);\r\n    }, [data])\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <h2>IP Address tracker</h2>\r\n            <form>\r\n                <div className=\"input\">\r\n                    <input\r\n                        className=\"mobile\"\r\n                        onChange={(e) =>\r\n                            setIp(e.target.value)\r\n                        }\r\n                        onKeyUp={handleEnter}\r\n                    />\r\n                    <button onClick={handleSearch} className=\"mobile\"><i class=\"material-icons\">chevron_right</i></button>\r\n\r\n                    <input\r\n                        className=\"desktop\"\r\n                        placeholder=\"Search for any IP address or domain\"\r\n\r\n                        onChange={(e) =>\r\n                            setIp(e.target.value)\r\n                        } />\r\n                    <button onClick={handleSearch} className=\"desktop\"><i class=\"material-icons\">chevron_right</i></button>\r\n                </div>\r\n            </form>\r\n\r\n            <div className=\"ip-details\">\r\n                {isTracking && <div>\r\n                    <p>Tracking IP address...</p>\r\n                </div>}\r\n                {!isTracking && !error && <div className=\"details\">\r\n                    <div className=\"info\">\r\n                        <small>IP ADDRESS</small>\r\n                        <h3>{ip}</h3>\r\n                    </div>\r\n                    <div className=\"info\">\r\n                        <small>LOCATION</small>\r\n                        <h3>{location}</h3>\r\n                    </div>\r\n                    <div className=\"info\">\r\n                        <small>TIMEZONE</small>\r\n                        <h3>{timezone}</h3>\r\n                    </div>\r\n                    <div className=\"info\">\r\n                        <small>ISP</small>\r\n                        <h3>{isp}</h3>\r\n                    </div>\r\n                </div>}\r\n                {error && <div>{error}</div>}\r\n            </div>\r\n            <MapContainer\r\n                center={center}\r\n                zoom={ZOOM_LEVEL}\r\n                ref={mapRef}\r\n            >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy <a href=\"http:/osm.org/copyright\">OpenStreetMap</a> contributors'>\r\n                </TileLayer>\r\n                <Marker\r\n                    position={center}\r\n                >\r\n                    <Popup>\r\n                        <span>\r\n                            You are here!\r\n                            <img src=\"../src/images/icon-location.svg\" alt=\"\" />\r\n                        </span>\r\n                    </Popup>\r\n                </Marker>\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\nexport default Tracker;","import Tracker from './Tracker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tracker />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}